import speech_recognition as sr
import webbrowser as wb
import pyttsx3 as p
import os

engine = p.init()
rate = engine.getProperty('rate')   # getting details of current speaking rate
#print (rate)                        #printing current voice rate
engine.setProperty('rate', 180)     # setting up new voice rate
#"""VOLUME"""
#volume = engine.getProperty('volume')   #getting to know current volume level (min=0 and max=1)
#print (volume)                          #printing current volume level
#engine.setProperty('volume',1.0)    # setting up volume level  between 0 and 1
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)

p.speak("Hello Tejas")
print()
print("WELCOME TO MY INTELLIGENCE WORLD".center(125))
print("--------------------------------".center(125))                    
engine.runAndWait()
p.speak("I am your Tech buddy")
p.speak("How can i help you...?")


while True:
  os.system("cls")
  print()
  print("WELCOME TO MY INTELLIGENCE WORLD".center(125))
  print("--------------------------------".center(125))
  print("\t \t \t Tell me your requirement... i am listening : ", end='')       
  print()
  print()
  
  
  r  =  sr.Recognizer()

  with sr.Microphone() as source:
      p.speak('start saying...')
      audio = r.listen(source)
      p.speak('i got it... please wait..!!')

  ch = r.recognize_google(audio)
  # print("start typing: ")
  #ch = input("Enter your command")
  
  if("hello" in ch) or ("hi" in ch) and ("heya" in ch) or ("hey" in ch):
    p.speak("hello Tejas , how are you ...?")
    print()
    input("\n Hit enter to continue...")
  elif("fine" in ch) or ("what" in ch) and ("about" in ch):
    p.speak("i am fine too")
  elif("tell" in ch) or ("about" in ch) and ("yourself" in ch):
    p.speak("i am your Tech buddy, and i can intregrate multiple technologies for you")
  elif ("How" in ch) and ("you can" in ch) or ("help me" in ch):
    p.speak("i can help you in following ways")
    print()
    print("!! I can help you in following ways !!".center(126))
    p.speak("create Secutiy Group")
    print()
    print(" * Create Secutiy Group".center(126))
    p.speak("create EC-2 Instances")
    print()
    print(" * Create EC-2 Instances".center(126))
    p.speak("Create s3 Bucket and Put objects into it")
    print()
    print(" * Create s3 Bucket and Put objects into it".center(126))
    p.speak("create Cloud Front Distribution")
    print()
    print(" * Create Cloud Front Distribution".center(126))
    p.speak("copy hadoop and jdk software to EC-2 Instances")
    print()
    print(" * Copy hadoop and jdk software to EC-2 Instances".center(126))
    p.speak("setup and configure namenode and datanode on the top of EC-2 Instances")
    print()
    print(" * Setup and configure namenode and datanode on the top of EC-2 Instances".center(126))
    p.speak("Create two EBS Volumes and mount them to Datanode EC-2 Instance")
    print()
    print(" * Create two EBS Volumes and mount them to Datanode EC-2 Instance".center(126))
    p.speak("create LVM Partition")
    print()
    print(" * Create LVM Partition".center(126))
    p.speak("start hadoop Cluster")
    print()
    print(" * Start hadoop Cluster".center(126))
    p.speak("Increase Datanode Storage on the fly")
    print()
    print(" * Increase Datanode Storage on the fly".center(126))
    p.speak("Configure docker on the top of EC-2 Instance")
    print()
    print(" * Configure docker on the top of EC-2 Instance".center(126))
    p.speak("pull CentOS Image and Run Centos Container")
    print()
    print(" * Pull CentOS Image and Run Centos Container".center(126))
    p.speak("configure webserver on the top of Centos Container which is running on the top of AWS Cloud")
    print()
    print(" * Configure webserver on the top of Centos Container which is running on the top of AWS Cloud".center(126))
    p.speak("setup Python Interpreter on the top of EC-2 Instance")
    print()
    print(" * setup Python Interpreter on the top of EC-2 Instance".center(126))
    p.speak("configure Ansible on the top of EC-2 Instance")
    print()
    print(" * Configure Ansible on the top of EC-2 Instance".center(126))
    p.speak("setup gedit , httpd , mysql , jupyter notebook and tcpdump  using Ansible on the top of EC-2 Instance")
    print()
    print(" * Setup gedit , httpd , mysql ,jupyter notebook and tcpdump using Ansible on the top of EC-2 Instance".center(126))
    p.speak("show the network configuration of your EC-2 Instance")
    print()
    print(" * Show the network configuration of your EC-2 Instance".center(126))
    p.speak("Configure NFS Server")
    print()
    print(" * Configure NFS server".center(126))
    p.speak("Configure Server as NTP Client")
    print()
    print(" * Configure Server as NTP Client".center(126))
    p.speak("Create new user")
    print()
    print(" * Create New User".center(126))
  elif("security" in ch) or ("group" in ch) or ("security group" in ch) or ("firewall" in ch):
    p.speak("Enter Security Group Name")
    sg = input("Enter Security Group Name : ")
    os.system("aws ec2 create-security-group --group-name {}  --description my-group".format(sg))
    os.system("aws ec2 authorize-security-group-ingress --group-name {} --protocol all --port all --cidr 0.0.0.0/0".format(sg))
    p.speak("Security Group is Successfully Created")
    input()
  elif("ec2" in ch) or ("instance" in ch) and ("ec2 instance" in ch):
    p.speak("Enter Security Group id")
    sg = input("Enter Security Group id : ")
    kn = input("Enter Key Name : ")
    os.system("aws ec2 run-instances --image-id ami-0e306788ff2473ccb --count 2 --instance-type t2.micro --key-name {} --security-group-ids {} --subnet-id subnet-cef800a5".format(kn,sg))
    p.speak("ec2 instances are successfully provisioned")
    input()
  elif("s3" in ch) or ("bucket" in ch) or ("s3 bucket" in ch):
    p.speak(" \n Enter Bucket Name")
    bn = input("Enter Bucket Name : ")
    os.system(" \n aws s3 mb s3://{}".format(bn))
    os.system(" \n aws s3 cp pic1.gif s3://{} --acl public-read".format(bn))
    os.system(" \n aws s3 cp pic2.jpg s3://{} --acl public-read".format(bn))
    p.speak("s3 Bucket created successfully and object are uploaded")
    input()
  elif("cloudfront" in ch) or ("cdn" in ch) or ("distribution" in ch):
    os.system(" \n aws cloudfront create-distribution --origin-domain-name {}.s3.amazonaws.com --default-root-object pic1.gif".format(bn))
    os.system(" \n aws cloudfront create-distribution --origin-domain-name {}.s3.amazonaws.com --default-root-object pic2.jpg".format(bn))
    p.speak("Cloud front Distribution created successfully")
    input()
    p.speak("Enter First CloudFront Domain Name")   
    url1 = input("Enter First CloudFront Domain Name : ")
    wb.open("{}".format(url1))
    input()
    p.speak("Enter Second CloudFront Domain Name")   
    url2 = input("Enter Second CloudFront Domain Name : ")
    wb.open("{}".format(url2))
    input()
  elif("copy" in ch) or ("hadoop" in ch) or ("jdk" in ch) or ("copy hadoop and jdk" in ch):
    p.speak("Enter namenode ip")
    ip1 = input("Enter Namenode IP : ")
    os.system("scp -i newaccount.pem hadoop-1.2.1-1.x86_64.rpm jdk-8u281-linux-x64.rpm ec2-user@{}:".format(ip1))
    print()
    p.speak("Enter datanode ip")
    ip2 = input("Enter Datenode IP : ")
    os.system("scp -i newaccount.pem hadoop-1.2.1-1.x86_64.rpm jdk-8u281-linux-x64.rpm ec2-user@{}:".format(ip2))
    p.speak("Packages are successfully Copied")
    input()
  elif("master node" in ch) or ("slave node" in ch):
    ip1 = input("Enter Namenode IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo rpm -ivh hadoop-1.2.1-1.x86_64.rpm jdk-8u281-linux-x64.rpm --force".format(ip1))
    p.speak("enter namenode directory")
    nn = input("Enter Namenode Directory : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo mkdir /{} ; sudo yum install git -y ; sudo git clone https://github.com/aaditya2801/bash-script.git".format(ip1,nn))
    p.speak("enter shell script for namenode")
    bs = input("Enter Shell Script : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo sh bash-script/{} ; sudo hadoop namenode -format".format(ip1,bs))
    print()
    ip2 = input("Enter Datenode IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo rpm -ivh hadoop-1.2.1-1.x86_64.rpm jdk-8u281-linux-x64.rpm --force".format(ip2))
    p.speak("enter datanode directory")
    nn = input("Enter Datanode Directory : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo mkdir /{} ; sudo yum install git -y ; sudo git clone https://github.com/aaditya2801/bash-script.git".format(ip2,nn))
    p.speak("enter Shell script for datanode")
    bs = input("Enter shell Script : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo sh bash-script/{}".format(ip2,bs))
    p.speak("setup and configure of namenode and datanode on the top of EC-2 Instances are done")
    input()
  elif("ebs" in ch) or ("volume" in ch) or ("ebs volume" in ch):
    os.system("aws ec2 create-volume --volume-type gp2 --size 1 --availability-zone ap-south-1a")
    os.system("aws ec2 create-volume --volume-type gp2 --size 1 --availability-zone ap-south-1a")
    p.speak("volumes are successfully created")
    p.speak("Enter Datanode instance id : ")
    id = input("Enter Datanode Instance id : ")
    p.speak("Enter First Volume id")
    volid1 = input("Enter First Volume id : ")
    os.system("aws ec2 attach-volume --volume-id {} --instance-id {} --device /dev/sdf".format(volid1,id))
    p.speak("Enter Second Volume id")
    volid2 = input("Enter Second Volume id : ")
    os.system("aws ec2 attach-volume --volume-id {} --instance-id {} --device /dev/sdj".format(volid2,id))
    p.speak("Volumes are successfully attached to the datanode instance")
    input()
  elif("lvm" in ch) or ("paritition" in ch) or ("lvm partition" in ch):
    ip2 = input("Enter Datenode IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo fdisk -l".format(ip2))
    p.speak("These are the drives present in datanode instance")
    input()
    p.speak("Enter first Drive Name")
    print()
    dn1 = input("Enter First Drive Name : ")
    p.speak("Enter second Drive Name")
    print()
    dn2 = input("Enter Second Drive Name : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo pvcreate {} ; sudo pvcreate {} ; sudo pvdisplay".format(ip2,dn1,dn2))
    p.speak("Physical volumes are created successfully")
    input()
    p.speak("enter volume group name")
    print()
    gn = input("Enter Group Name : ")
    p.speak("enter first PV name")
    print()
    pv1 = input("Enter First PV Name : ")
    p.speak("Enter second PV Name")
    print()
    pv2 = input("Enter Second PV Name : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo vgcreate {} {} {} ; sudo vgdisplay {}".format(ip2,gn,pv1,pv2,gn))
    p.speak("volume group is successfully created")
    input()
    p.speak("enter size of partition")
    print()
    sz = input("Enter Size of Partition : ")
    print()
    p.speak("enter logical partition name")
    print()
    lp = input("Enter Logical Partition Name : ")
    print()
    os.system("ssh -i newaccount.pem ec2-user@{} sudo lvcreate --size {}G --name {} {} ; sudo lvdisplay {}/{} ; sudo mkfs.ext4 /dev/{}/{}".format(ip2,sz,lp,gn,gn,lp,gn,lp))
    p.speak("partition is successfully created")
    print()
    p.speak("enter mount point name")
    print()
    mp = input("Enter Mount Point Name : ")
    print()
    os.system("ssh -i newaccount.pem ec2-user@{} sudo mount /dev/{}/{} /{} ; sudo df -h ".format(ip2,gn,lp,mp))
    p.speak("Partition is successfully mounted on datanode directory")
    input()
  elif("cluster" in ch):
    ip1 = input("Enter Namenode IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo hadoop-daemon.sh start namenode".format(ip1))
    p.speak("namenode started")
    print()
    os.system("ssh root@{} hadoop-daemon.sh start datanode ; hadoop dfsadmin -report".format(ip2))
    p.speak("datanode started and providing limited storage to the cluster")
    input()
  elif("increase storage" in ch) or ("increase" in ch) or ("storage" in ch) or ("extend storage" in ch):
    p.speak("enter incremental size of datanode storage in MB")
    print()
    sz = input("Enter Incremental size of Datanode Storage in MB : ")
    print()
    os.system("ssh -i newaccount.pem ec2-user@{} sudo lvextend --size +{}M /dev/{}/{} ; sudo resize2fs /dev/{}/{} ; sudo hadoop dfsadmin -report".format(ip2,sz,gn,lp,gn,lp))
    p.speak("storage extended")
    input()
  elif("setup docker" in ch) or ("docker" in ch):
    p.speak("Enter Instance IP where you want to configure docker")
    ip = input("Enter Instance IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo amazon-linux-extras install docker -y ; sudo systemctl start docker ; sudo systemctl status docker".format(ip))
    p.speak("docker is successfully configured")
    input()
  elif("centos" in ch) or ("container" in ch) or ("centos container" in ch):
    p.speak("Enter Image name")
    print()
    img = input("Enter Image Name : ")
    p.speak("Enter Container name")
    cnt = input("Enter Container Name : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo docker pull {} ; sudo docker images ; sudo docker run -dit -p 8080:80 --name {} centos ; docker ps".format(ip,img,cnt))
    p.speak("CentOS Image is successfully pulled and Centos Container is also running")
    input()
  elif("webserver" in ch) or ("web server" in ch):
    print()
    ip = input("Enter Instance IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{}".format(ip))
    p.speak("webserver is successfully configured and webpage is deploying")
    wb.open("{}:8080".format(ip))
    input()
  elif("python" in ch) or ("python3" in ch) or ("setup python" in ch):
    os.system("ssh -i newaccount.pem ec2-user@{} sudo yum install python3 -y ; sudo rpm -q python3".format(ip))
    p.speak("python interpreter setup is done")
    input()
   
  elif("ansible" in ch):
    os.system("ssh -i newaccount.pem ec2-user@{} sudo pip3 install ansible ; sudomkdir /etc/ansible/ ; sudo touch /etc/ansible/ansible.cfg ; sudo ansible --version".format(ip))
    p.speak("Ansible is successfully configured")   
    input()
  elif("packages" in ch) or ("install packages" in ch):
    ip = input("Enter Instance IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo ansible-playbook bash-script/code.yml ; sudo rpm -q gedit ; sudo rpm -q httpd ; sudo rpm -q mariadb ; sudo rpm -q tcpdump ; sudo pip3 list".format(ip))
    p.speak("Ansible Playbook successfully deployed and packages are installed successfully")
    input()
  elif("network" in ch) or ("configurations" in ch) or ("network interface" in ch):
    os.system("ssh -i newaccount.pem ec2-user@{} sudo ifconfig".format(ip))
    p.speak("These are the network Configurations")
    input()
  elif("nfs" in ch) or ("server" in ch):
    ip = input("Enter Instance IP : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo yum install nfs-utils ; sudo systemctl start nfs-server ; sudo systemctl status nfs-server ; sudo rpm -q nfs-utils".format(ip))
    p.speak("nfs server is successfully configured")
    input()
  elif("ntp" in ch) or ("client" in ch) or ("ntp client" in ch):
    os.system("ssh -i newaccount.pem ec2-user@{} sudo yum install chrony ; sudo systemctl start chronyd ; sudo systemctl status chronyd ; sudo rpm -q chrony ; sudo chronyc sources".format(ip))
    p.speak("ntp is successfully configured")
    input()
  elif("user" in ch) or ("tenant" in ch):
    p.speak("Enter User Name")
    uname = input("Enter User Name : ")
    os.system("ssh -i newaccount.pem ec2-user@{} sudo useradd {} ; sudo passwd {} ; sudo cat /etc/passwd".format(ip,uname,uname))
    p.speak("new user is successfully created")
    input()
  elif("webpage" in ch):
    p.speak("webpage is deploying")
    wb.open("192.168.29.56/new.html")   
    input()
  elif ("exit" in ch) or ("quit" in ch) or ("bye" in ch):
    p.speak("see you soon,, have a nice day...!!!")
    break
  else:
    print("not understand")

input("\n Press Enter to continue....") 